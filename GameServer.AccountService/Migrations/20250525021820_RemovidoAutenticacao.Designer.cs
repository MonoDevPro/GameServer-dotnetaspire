// <auto-generated />
using System;
using GameServer.AccountService.AccountManagement.Adapters.Out.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GameServer.AccountService.Migrations
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20250525021820_RemovidoAutenticacao")]
    partial class RemovidoAutenticacao
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountRoleVO", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("RolesValue")
                        .HasColumnType("text");

                    b.HasKey("AccountId", "RolesValue");

                    b.HasIndex("RolesValue");

                    b.ToTable("AccountRoles", (string)null);
                });

            modelBuilder.Entity("GameServer.AccountService.AccountManagement.Domain.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("GameServer.AccountService.AccountManagement.Domain.ValueObjects.RoleVO", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Value");

                    b.ToTable("RoleVO");
                });

            modelBuilder.Entity("AccountRoleVO", b =>
                {
                    b.HasOne("GameServer.AccountService.AccountManagement.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameServer.AccountService.AccountManagement.Domain.ValueObjects.RoleVO", null)
                        .WithMany()
                        .HasForeignKey("RolesValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameServer.AccountService.AccountManagement.Domain.Entities.Account", b =>
                {
                    b.OwnsOne("GameServer.AccountService.AccountManagement.Domain.ValueObjects.BanInfoVO", "BanInfo", b1 =>
                        {
                            b1.Property<long>("AccountId")
                                .HasColumnType("bigint");

                            b1.Property<long?>("BannedById")
                                .HasColumnType("bigint")
                                .HasColumnName("BannedById");

                            b1.Property<DateTime?>("ExpiresAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("BanExpiresAt");

                            b1.Property<string>("Reason")
                                .HasColumnType("text")
                                .HasColumnName("BanReason");

                            b1.Property<int>("Status")
                                .HasColumnType("integer")
                                .HasColumnName("BanStatus");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("GameServer.AccountService.AccountManagement.Domain.ValueObjects.LoginInfoVO", "LastLoginInfo", b1 =>
                        {
                            b1.Property<long>("AccountId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("LastLoginDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("LastLoginDate");

                            b1.Property<string>("LastLoginIp")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("LastLoginIp");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("GameServer.AccountService.AccountManagement.Domain.ValueObjects.PasswordVO", "Password", b1 =>
                        {
                            b1.Property<long>("AccountId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PasswordHash");

                            b1.Property<int>("Strength")
                                .HasColumnType("integer")
                                .HasColumnName("PasswordStrength");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("BanInfo")
                        .IsRequired();

                    b.Navigation("LastLoginInfo")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
