// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/worldsimulation.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc {
  /// <summary>
  /// The world simulation service definition
  /// </summary>
  public static partial class WorldSimulation
  {
    static readonly string __ServiceName = "worldsimulation.WorldSimulation";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddPlayerRequest> __Marshaller_worldsimulation_AddPlayerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddPlayerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.PlayerResponse> __Marshaller_worldsimulation_PlayerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.PlayerResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdatePositionRequest> __Marshaller_worldsimulation_UpdatePositionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdatePositionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> __Marshaller_worldsimulation_StatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdateRotationRequest> __Marshaller_worldsimulation_UpdateRotationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdateRotationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddNPCRequest> __Marshaller_worldsimulation_AddNPCRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddNPCRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.NPCResponse> __Marshaller_worldsimulation_NPCResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.NPCResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.InteractionRequest> __Marshaller_worldsimulation_InteractionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.InteractionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.CreateWorldRequest> __Marshaller_worldsimulation_CreateWorldRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.CreateWorldRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.WorldResponse> __Marshaller_worldsimulation_WorldResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.WorldResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddRegionRequest> __Marshaller_worldsimulation_AddRegionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddRegionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.RegionResponse> __Marshaller_worldsimulation_RegionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.RegionResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddPlayerRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.PlayerResponse> __Method_AddPlayerToWorld = new grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddPlayerRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.PlayerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddPlayerToWorld",
        __Marshaller_worldsimulation_AddPlayerRequest,
        __Marshaller_worldsimulation_PlayerResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdatePositionRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> __Method_UpdatePlayerPosition = new grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdatePositionRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePlayerPosition",
        __Marshaller_worldsimulation_UpdatePositionRequest,
        __Marshaller_worldsimulation_StatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdateRotationRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> __Method_UpdatePlayerRotation = new grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdateRotationRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePlayerRotation",
        __Marshaller_worldsimulation_UpdateRotationRequest,
        __Marshaller_worldsimulation_StatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddNPCRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.NPCResponse> __Method_AddNPC = new grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddNPCRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.NPCResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddNPC",
        __Marshaller_worldsimulation_AddNPCRequest,
        __Marshaller_worldsimulation_NPCResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.InteractionRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> __Method_ProcessInteraction = new grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.InteractionRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProcessInteraction",
        __Marshaller_worldsimulation_InteractionRequest,
        __Marshaller_worldsimulation_StatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.CreateWorldRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.WorldResponse> __Method_CreateWorld = new grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.CreateWorldRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.WorldResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWorld",
        __Marshaller_worldsimulation_CreateWorldRequest,
        __Marshaller_worldsimulation_WorldResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddRegionRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.RegionResponse> __Method_AddRegion = new grpc::Method<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddRegionRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.RegionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddRegion",
        __Marshaller_worldsimulation_AddRegionRequest,
        __Marshaller_worldsimulation_RegionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.WorldsimulationReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of WorldSimulation</summary>
    [grpc::BindServiceMethod(typeof(WorldSimulation), "BindService")]
    public abstract partial class WorldSimulationBase
    {
      /// <summary>
      /// Add a player to the world
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.PlayerResponse> AddPlayerToWorld(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddPlayerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update player position
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> UpdatePlayerPosition(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdatePositionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update player rotation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> UpdatePlayerRotation(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdateRotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add an NPC to the world
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.NPCResponse> AddNPC(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddNPCRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Process interaction between entities
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> ProcessInteraction(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.InteractionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new world
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.WorldResponse> CreateWorld(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.CreateWorldRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a region to a world
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.RegionResponse> AddRegion(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddRegionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WorldSimulation</summary>
    public partial class WorldSimulationClient : grpc::ClientBase<WorldSimulationClient>
    {
      /// <summary>Creates a new client for WorldSimulation</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorldSimulationClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WorldSimulation that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorldSimulationClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorldSimulationClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorldSimulationClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Add a player to the world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.PlayerResponse AddPlayerToWorld(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddPlayerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPlayerToWorld(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a player to the world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.PlayerResponse AddPlayerToWorld(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddPlayerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddPlayerToWorld, null, options, request);
      }
      /// <summary>
      /// Add a player to the world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.PlayerResponse> AddPlayerToWorldAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddPlayerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPlayerToWorldAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a player to the world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.PlayerResponse> AddPlayerToWorldAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddPlayerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddPlayerToWorld, null, options, request);
      }
      /// <summary>
      /// Update player position
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse UpdatePlayerPosition(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdatePositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePlayerPosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update player position
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse UpdatePlayerPosition(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdatePositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePlayerPosition, null, options, request);
      }
      /// <summary>
      /// Update player position
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> UpdatePlayerPositionAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdatePositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePlayerPositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update player position
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> UpdatePlayerPositionAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdatePositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePlayerPosition, null, options, request);
      }
      /// <summary>
      /// Update player rotation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse UpdatePlayerRotation(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdateRotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePlayerRotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update player rotation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse UpdatePlayerRotation(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdateRotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePlayerRotation, null, options, request);
      }
      /// <summary>
      /// Update player rotation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> UpdatePlayerRotationAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdateRotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePlayerRotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update player rotation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> UpdatePlayerRotationAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdateRotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePlayerRotation, null, options, request);
      }
      /// <summary>
      /// Add an NPC to the world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.NPCResponse AddNPC(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddNPCRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddNPC(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an NPC to the world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.NPCResponse AddNPC(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddNPCRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddNPC, null, options, request);
      }
      /// <summary>
      /// Add an NPC to the world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.NPCResponse> AddNPCAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddNPCRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddNPCAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an NPC to the world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.NPCResponse> AddNPCAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddNPCRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddNPC, null, options, request);
      }
      /// <summary>
      /// Process interaction between entities
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse ProcessInteraction(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.InteractionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProcessInteraction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Process interaction between entities
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse ProcessInteraction(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.InteractionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProcessInteraction, null, options, request);
      }
      /// <summary>
      /// Process interaction between entities
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> ProcessInteractionAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.InteractionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProcessInteractionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Process interaction between entities
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse> ProcessInteractionAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.InteractionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProcessInteraction, null, options, request);
      }
      /// <summary>
      /// Create a new world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.WorldResponse CreateWorld(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.CreateWorldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWorld(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.WorldResponse CreateWorld(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.CreateWorldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWorld, null, options, request);
      }
      /// <summary>
      /// Create a new world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.WorldResponse> CreateWorldAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.CreateWorldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWorldAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.WorldResponse> CreateWorldAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.CreateWorldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWorld, null, options, request);
      }
      /// <summary>
      /// Add a region to a world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.RegionResponse AddRegion(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddRegionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRegion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a region to a world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.RegionResponse AddRegion(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddRegionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddRegion, null, options, request);
      }
      /// <summary>
      /// Add a region to a world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.RegionResponse> AddRegionAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddRegionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRegionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a region to a world
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.RegionResponse> AddRegionAsync(global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddRegionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddRegion, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WorldSimulationClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WorldSimulationClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WorldSimulationBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddPlayerToWorld, serviceImpl.AddPlayerToWorld)
          .AddMethod(__Method_UpdatePlayerPosition, serviceImpl.UpdatePlayerPosition)
          .AddMethod(__Method_UpdatePlayerRotation, serviceImpl.UpdatePlayerRotation)
          .AddMethod(__Method_AddNPC, serviceImpl.AddNPC)
          .AddMethod(__Method_ProcessInteraction, serviceImpl.ProcessInteraction)
          .AddMethod(__Method_CreateWorld, serviceImpl.CreateWorld)
          .AddMethod(__Method_AddRegion, serviceImpl.AddRegion).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WorldSimulationBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddPlayerToWorld, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddPlayerRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.PlayerResponse>(serviceImpl.AddPlayerToWorld));
      serviceBinder.AddMethod(__Method_UpdatePlayerPosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdatePositionRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse>(serviceImpl.UpdatePlayerPosition));
      serviceBinder.AddMethod(__Method_UpdatePlayerRotation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.UpdateRotationRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse>(serviceImpl.UpdatePlayerRotation));
      serviceBinder.AddMethod(__Method_AddNPC, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddNPCRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.NPCResponse>(serviceImpl.AddNPC));
      serviceBinder.AddMethod(__Method_ProcessInteraction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.InteractionRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.StatusResponse>(serviceImpl.ProcessInteraction));
      serviceBinder.AddMethod(__Method_CreateWorld, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.CreateWorldRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.WorldResponse>(serviceImpl.CreateWorld));
      serviceBinder.AddMethod(__Method_AddRegion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.AddRegionRequest, global::GameServer.WorldSimulationService.Infrastructure.Adapters.In.Grpc.RegionResponse>(serviceImpl.AddRegion));
    }

  }
}
#endregion
