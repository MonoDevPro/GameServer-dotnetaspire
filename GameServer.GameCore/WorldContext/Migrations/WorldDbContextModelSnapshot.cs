// <auto-generated />
using System;
using GameServer.WorldSimulationService.Infrastructure.Adapters.Out.Persistence.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GameServer.WorldSimulationService.Migrations
{
    [DbContext(typeof(WorldDbContext))]
    partial class WorldDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("EntitySequence");

            modelBuilder.Entity("GameServer.WorldSimulationService.Domain.Entities.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"EntitySequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"));

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("GameServer.WorldService.Domain.Entities.World", b =>
                {
                    b.HasBaseType("GameServer.WorldSimulationService.Domain.Entities.Entity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("Worlds", (string)null);
                });

            modelBuilder.Entity("GameServer.WorldSimulationService.Domain.Entities.GameEntity", b =>
                {
                    b.HasBaseType("GameServer.WorldSimulationService.Domain.Entities.Entity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Rotation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Scale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("RegionId");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("GameServer.WorldSimulationService.Domain.Entities.Region", b =>
                {
                    b.HasBaseType("GameServer.WorldSimulationService.Domain.Entities.Entity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.Property<long>("WorldId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorldPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("WorldId");

                    b.ToTable("Regions", (string)null);
                });

            modelBuilder.Entity("GameServer.WorldSimulationService.Domain.Entities.NPC", b =>
                {
                    b.HasBaseType("GameServer.WorldSimulationService.Domain.Entities.GameEntity");

                    b.Property<string>("Dialogue")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<bool>("IsInteractable")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("integer");

                    b.Property<string>("MovementCenter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("MovementRadius")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.ToTable("NPCs", (string)null);
                });

            modelBuilder.Entity("GameServer.WorldSimulationService.Domain.Entities.Player", b =>
                {
                    b.HasBaseType("GameServer.WorldSimulationService.Domain.Entities.GameEntity");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("GameServer.WorldSimulationService.Domain.Entities.GameEntity", b =>
                {
                    b.HasOne("GameServer.WorldSimulationService.Domain.Entities.Region", "Region")
                        .WithMany("Entities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("GameServer.WorldSimulationService.Domain.Entities.Region", b =>
                {
                    b.HasOne("GameServer.WorldService.Domain.Entities.World", "World")
                        .WithMany("Regions")
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("World");
                });

            modelBuilder.Entity("GameServer.WorldService.Domain.Entities.World", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("GameServer.WorldSimulationService.Domain.Entities.Region", b =>
                {
                    b.Navigation("Entities");
                });
#pragma warning restore 612, 618
        }
    }
}
